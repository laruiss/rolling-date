{"version":3,"sources":["app/js/rolling-date.js"],"names":[],"mappingsfile":"public/js/rolling-date.js","sourcesContent":["/* global jQuery, window, document */\n(function ($, moment, window, document, undefined) {\n    'use strict';\n\n    var pluginName = 'widgetDate',\n        defaults = {\n            locale: 'en',\n        };\n    \n    function getDefaultYears() {\n        var now = new Date(),\n            currentYear = now.getFullYear(),\n            i = currentYear - 5,\n            lastYear = currentYear + 5,\n            availableYears = [];\n        while (i < lastYear) Â {\n            availableYears.push(i++);\n        }\n        return availableYears;\n    }\n\n    function Plugin(element, options) {\n        this.element = element;\n        this.$el = $(this.element);\n        this.options = $.extend({}, defaults, options);\n        \n        this._defaults = defaults;\n        this._name = pluginName;\n\n        console.log(this.options.locale);\n        this.setLocale(this.options.locale);\n\n        this.init();\n    }\n\n    Plugin.prototype = {\n        init: function () {\n            var plugin = this,\n                now = new Date(),\n                month = now.getMonth() + 1,\n                day = now.getDate();\n            this.selectedDay = day < 10 ? '0' + day : day;\n            this.selectedMonth = month < 10 ? '0' + month : month;\n            this.selectedYear = now.getFullYear();\n            this.currentYear = now.getFullYear();\n            this.lastYear = this.currentYear - 1;\n            \n            this.availableYears = this.options.years || getDefaultYears();\n\n            this.createDateElements();\n            this.$el.attr('autocomplete', 'off');\n            this.$el.on('focus click', function () {\n                plugin.placeWrapper();\n            });\n\n            this.printSelectedDate();\n            this.checkInput();\n\n            $(window).on('click', function (e) {\n                var isDateWrapper = false;\n                $(e.target).parents().each(function (i, el) {\n                    if (el === plugin.$dateWrapper.get(0)) {\n                        isDateWrapper = true;\n                    }\n                });\n                if (e.target !== plugin.element && !isDateWrapper) {\n                    plugin.hideWrapper();\n                }\n            });\n\n            this.$el.on('keyup', this.checkInput.bind(this));\n        },\n\n        checkInput: function (e) {\n\n            var plugin = this,\n                monthInput = plugin.element.value.replace(/(?:^|.*[\\W])([a-zA-Z]+).*/i, '$1'),\n                dayInput = plugin.element.value.replace(/(?:^|.*[\\W])([0-9]{1,2})(\\W.*|$)/, '$1'),\n                yearInput = plugin.element.value.replace(/(?:^|.*[\\W])([0-9]{4})(\\W.*|$)/, '$1'),\n\n                matches = this.highlightMatches(plugin.$monthsElement, monthInput);\n\n            plugin.selectedMonth = matches.length ? matches[0].data('id') : plugin.selectedMonth;\n\n            matches = this.highlightMatches(plugin.$daysElement, dayInput, true);\n            plugin.selectedDay = matches.length ? matches[0].data('id') : plugin.selectedDay;\n\n            matches = this.highlightMatches(plugin.$yearsElement, yearInput, true);\n            plugin.selectedYear = matches.length ? matches[0].data('id') : plugin.selectedYear;\n\n            if (e && e.which === 13) {\n                e.preventDefault();\n                plugin.placeWrapper();\n                plugin.printSelectedDate();\n                plugin.element.focus();\n            }\n\n            if (e && e.which === 27) {\n                e.preventDefault();\n                plugin.hideWrapper();\n            }\n            \n        },\n\n        highlightMatches: function highlightMatches($el, input, exact) {\n            var matches = [];\n            $el.children().each(function (i, el) {\n                if (exact) {\n                    if (el.innerHTML === input) {\n                        matches.push($(el).addClass('widget-date-selected'));\n                    }\n                } else if (input && el.innerHTML.toLowerCase().indexOf(input.toLowerCase()) > -1) {\n                    matches.push($(el).addClass('widget-date-selected'));\n                } else {\n                    $(el).removeClass('widget-date-selected');\n                }\n            });\n\n            if (matches.length === 1) {\n                this.scrollToSelection(matches[0]);\n            }\n            return matches;\n\n        },\n\n        printSelectedDate: function () {\n            var dateAsString = this.selectedYear + '-' + this.selectedMonth +  '-' + this.selectedDay;\n            var formattedDate = moment(dateAsString).format('LL');\n            this.$el.val(formattedDate);\n            return this;\n        },\n\n        scrollToSelection: function ($el) {\n            $el.siblings().removeClass('widget-date-selected');\n            $el.parent().animate({\n                scrollTop: $el.addClass('widget-date-selected').position().top + $el.parent().scrollTop()\n            }, 500);\n            return this;\n        },\n\n        createDateElements: function () {\n            this.$monthsElement = $('<ul class=\"widget-date-list  widget-date-months  nano-content\">');\n            var monthsHtml = '';\n            $.each(moment.months(), function (i, month) {\n                i++;\n                monthsHtml += '<li data-id=\"' + (i < 10 ? ('0' + i) : i) + '\">' + month + '</li>';\n            });\n            this.$monthsElement.append(monthsHtml).on('click', 'li', function (e) {\n                this.selectedMonth = e.target.dataset.id;\n                this.scrollToSelection($(e.target));\n                this.printSelectedDate();\n                this.updateNumberOfDays();\n            }.bind(this));\n\n            this.$yearsElement = $('<ul class=\"widget-date-list  widget-date-years  nano-content\">')\n                .appendTo($('<div class=\"nano  col-xs-3\">'));\n            var yearsHtml = '';\n            $.each(this.availableYears, function (i, year) {\n                yearsHtml += '<li data-id=\"' + year + '\">' + year + '</li>';\n            });\n            this.$yearsElement.append(yearsHtml).on('click', 'li', function (e) {\n                this.selectedYear = e.target.dataset.id;\n                this.scrollToSelection($(e.target));\n                this.printSelectedDate();\n                this.updateNumberOfDays();\n            }.bind(this));\n\n            this.$daysElement = $('<ul class=\"widget-date-list  widget-date-days  nano-content\">')\n                .appendTo($('<div class=\"nano  col-xs-3\">'));\n            this.updateNumberOfDays();\n\n            this.$daysElement.on('click', 'li', function (e) {\n                this.selectedDay = e.target.dataset.id;\n                this.scrollToSelection($(e.target));\n                this.printSelectedDate();\n            }.bind(this));\n\n            \n            this.M = this.$monthsWrapper = $('<div class=\"nano  col-month\">').append(this.$monthsElement);\n            this.D = this.$daysWrapper = $('<div class=\"nano  col-day\">').append(this.$daysElement);\n            this.Y = this.$yearsWrapper = $('<div class=\"nano  col-year\">').append(this.$yearsElement);\n            this.$dateWrapper = $('<div class=\"widget-date-wrapper  row\">')\n                .append(this[this.dateElementsOrder[0].charAt(0)])\n                .append(this[this.dateElementsOrder[1].charAt(0)])\n                .append(this[this.dateElementsOrder[2].charAt(0)])\n                .appendTo(document.body);\n\n            return this;\n        },\n        \n        updateNumberOfDays: function () {\n            var daysHtml = '';\n            var numberOfDays = moment().month(parseInt(this.selectedMonth)).year(this.selectedYear).date(0).date();\n            for (var i = 1; i <= numberOfDays; i++) {\n                daysHtml += '<li data-id=\"' + (i < 10 ? ('0' + i) : i) + '\">' + i + '</li>';\n            }\n            this.$daysElement.html(daysHtml);\n        },\n\n        hideWrapper: function () {\n            this.$dateWrapper.removeClass('widget-date--active');\n            this.$el.trigger('date-picker:close');\n        },\n\n        placeWrapper: function () {\n            var offset = this.$el.offset();\n            this.$dateWrapper.css({\n                'left': offset.left + 'px',\n                'width': this.$el.width() +\n                    parseInt(this.$el.css('paddingLeft')) +\n                    parseInt(this.$el.css('paddingRight')) + 'px',\n                'top': offset.top + this.$el.height() +\n                    parseInt(this.$el.css('borderTopWidth')) +\n                    parseInt(this.$el.css('borderBottomWidth')) + 'px'\n            }).addClass('widget-date--active');\n            window.setTimeout(function () {\n                var withFlash = {\n                    flash: true\n                };\n                this.$monthsElement.parent().nanoScroller(withFlash);\n                this.$daysElement.parent().nanoScroller(withFlash);\n                this.$yearsElement.parent().nanoScroller(withFlash);\n            }.bind(this), 500);\n            \n            this.$el.trigger('date-picker:open');\n        },\n\n        setLocale: function (locale) {\n            this.options.locale = locale;\n            moment.locale(locale);\n            console.log('moment locale set', moment.locale());\n            this.dateElementsOrder = moment.localeData().longDateFormat('LL').split(' ');\n            console.log('moment locale set', locale, this.options.locale, moment.locale(), this.dateElementsOrder);\n        },\n        \n        getDate: function () {\n            return new Date(this.selectedYear, this.selectedMonth-1, this.selectedDay);\n        },\n        \n        storeMoment: function () {\n            this.moment = moment(this.getDate());\n        },\n\n        getMoment: function () {\n            this.storeMoment();\n            return this.moment;\n        }\n    };\n\n    $.fn[pluginName] = function (options) {\n        return this.each(function () {\n            if (!$.data(this, 'plugin_' + pluginName)) {\n                $.data(this, 'plugin_' + pluginName, new Plugin(this, options));\n            }\n        });\n    };\n\n})(jQuery, moment, window, document);"]}